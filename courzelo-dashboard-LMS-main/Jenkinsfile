def getGitBranchName() {
    return scm.branches[0].name
}

def branchName
def targetBranch

pipeline {
    agent any

    environment {
       DOCKERHUB_USERNAME = "oussemaouakad"
        DEV_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v1.1.7-dev"
        STAGING_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v1.0.0-staging"
        PROD_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v1.0.0-prod"
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: "${scm.branches[0].name}", description: 'Git branch name')
        string(name: 'CHANGE_ID', defaultValue: '', description: 'Git change ID for merge requests')
        string(name: 'CHANGE_TARGET', defaultValue: '', description: 'Git change ID for the target merge requests')
    }

    stages {
        stage('Github') {
            steps {
                script {
                    branchName = params.BRANCH_NAME
                    targetBranch = branchName

                    git branch: branchName,
                        url: 'https://github.com/Godyrex/Courzelo-Web-LMS.git',
                        credentialsId: 'AlaGitH'
                }
                echo "Current branch name: ${branchName}"
                echo "Current branch name: ${targetBranch}"
            }
        }

      stage('Clean') {
            steps {
                sh 'rm -rf node_modules'
            }
        }

        stage('Install dependencies'){
            steps{
                nodejs('nodeJSInstallationName'){
                  sh 'npm install --legacy-peer-deps'
                  //sh 'npm install webpack --legacy-peer-deps'
                }
            }
        }

      // stage('Static Test with Sonar') {
      //         // environment {
      //        //     scannerHome = tool 'SonarScanner'
      //         // }
      //        when {
      //            expression {
      //                (params.CHANGE_ID != null) && ((targetBranch == 'devops') || (targetBranch == 'main') || (targetBranch == 'staging'))
      //            }
      //      }
      //         steps{
      //            nodejs('nodeJSInstallationName'){
      //                sh 'node sonar-project.js'
      //            }
      //         }
      // }

       stage('Build Docker') {
    when {
        expression {
          (params.CHANGE_ID != null) && ((targetBranch == 'develop') || (targetBranch == 'main') || (targetBranch == 'staging'))
        }
    }
    steps {
        script {
            if (targetBranch == 'staging') {
                sh "docker build -t ${STAGING_TAG} ."
            } else if (targetBranch == 'main') {
                sh "docker build -t ${PROD_TAG} ."
            } else if (targetBranch == 'develop' ) {
                sh "docker build -t ${DEV_TAG} ."
            }
        }
    }
}

        
     stage('Docker Login'){
        steps{
            withCredentials([usernamePassword(credentialsId: 'Ala_dockerHub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
            sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
            }
        }
    }


        
	stage('Docker Push'){
		when {
        expression {
(params.CHANGE_ID != null) && ((targetBranch == 'develop') || (targetBranch == 'main') || (targetBranch == 'staging'))        }
    }
            steps{
                sh 'docker push $DOCKERHUB_USERNAME/courzelo-front-webapp --all-tags '
            }
        }


  stage('Remove Containers') {
      when {
        expression {
(params.CHANGE_ID != null) && ((targetBranch == 'develop') || (targetBranch == 'main') || (targetBranch == 'staging'))        }
      }
      steps {
        sh '''
        container_ids=$(docker ps -q --filter "publish=4225/tcp")
        if [ -n "$container_ids" ]; then
          echo "Stopping and removing containers..."
          docker stop $container_ids
          docker rm $container_ids
        else
          echo "No containers found using port 4225."
        fi
        '''
      }
    }


      stage('Deploy to DEV') {
      when {
        expression {
          (params.CHANGE_ID != null) && ((targetBranch == 'main')|| (targetBranch == 'develop'))
        }
      }
      steps {
        // sh "docker pull ${DEV_TAG}"
        // sh "docker run -d --name courzelo-prod -p 4225:80 ${DEV_TAG}"
        sh "sudo ansible-playbook k8s.yml -i host.yml"
      }
    }
      
      
    

  
  }
}
