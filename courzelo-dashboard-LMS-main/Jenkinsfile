def getGitBranchName() {
    return scm.branches[0].name
}

def branchName
def targetBranch

pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = "cyrine995"
        DEV_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v1.1.10-dev"
        STAGING_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v4.0.20-staging"
        PROD_TAG = "${DOCKERHUB_USERNAME}/courzelo-front-webapp:v4.0.20-prod"
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: "${scm.branches[0].name}", description: 'Git branch name')
        string(name: 'CHANGE_ID', defaultValue: '', description: 'Git change ID for merge requests')
        string(name: 'CHANGE_TARGET', defaultValue: '', description: 'Git change ID for the target merge requests')
    }

    stages {
        stage('Branch Name') {
            steps {
                script {
                    branchName = params.BRANCH_NAME
                    echo "Current branch name: ${branchName}"
                }
            }
        }

        stage('Target Branch') {
            steps {
                script {
                    targetBranch = branchName
                    echo "Target branch name: ${targetBranch}"
                }
            }
        }

        stage('GitHub Checkout') {
            steps {
                git branch: branchName, url: 'https://github.com/ipactconsult2025/courzelo-dashboard-LMS.git', credentialsId: 'git-cred'
                echo "Current branch name: ${branchName}"
                echo "Target branch name: ${targetBranch}"
            }
        }

        stage('Clean Build') {
            steps {
                sh 'rm -rf node_modules'
            }
        }

	    stage('Install dependencies'){
            steps{
                nodejs('nodeJSInstallationName'){
                  sh 'npm install --legacy-peer-deps --force'
                 
                }
            }
        }
	      stage('SonarQube Analysis') {
     when {
                expression {
                    (params.CHANGE_ID != null) && ((targetBranch == 'develop2025') || (targetBranch == 'main') || (targetBranch == 'staging'))
                }
            }
    steps {
        script {
            def scannerHome = tool 'sonarqubeScanner'
            withSonarQubeEnv('sq1') {
                sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=courzelo-dashboard-lms \
                    -Dsonar.projectName="courzelo-dashboard-lms" \
                    -Dsonar.sources=src 
                    
                """
            }
        }
    }
      }



	



        stage('Build Docker') {
            steps {
                script {
                    echo "Building Docker image"
                    sh "docker build -t ${DEV_TAG} ."
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                }
            }
        }

        stage('DockerHub Push') {
            steps {
                sh "docker push ${DEV_TAG}"
            }
        }

       

        stage('Deploy ') {
            when {
                expression {
                    (params.CHANGE_ID != null) && (targetBranch == 'develop2025')
                }
            }
            steps {
		    sh "sudo ansible-playbook k8s.yml -i host.yml"

            }
        }
    }
}
