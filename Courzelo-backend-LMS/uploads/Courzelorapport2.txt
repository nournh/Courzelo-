hello courzelo so this is my final report for the project 
i hope u like it 
Setup Angular Project: Create a new Angular project using Angular CLI.

Generate Components: Generate necessary components for file upload, project view, and PDF display.

Install Dependencies: Use npm or yarn to install required dependencies like Angular Material for UI components.

Create File Upload Component: Design a component for uploading files with an input field and a button.

Implement File Upload Service: Create a service to handle file upload functionality using HttpClient to communicate with your Spring Boot backend.

Handle File Uploads: Implement methods to handle file selection, upload progress, and success/error handling.

Display Uploaded Files: Develop a component to display uploaded files in a card format, listing file names with options to view or delete.

Fetch Files from Backend: Use HttpClient to fetch uploaded files from your Spring Boot backend endpoint.

Display Files in Cards: Render fetched files dynamically in Angular Material cards, each displaying file name and a link to view.

Implement PDF Viewing: Integrate a PDF viewer component (like ngx-extended-pdf-viewer) to display PDF files directly in your Angular application.

Configure PDF Viewer: Configure the PDF viewer component to fetch and display PDF files from your backend.

Handle File Deletion: Implement functionality to delete files using an HTTP DELETE request to your backend.

Confirm Deletion: Add confirmation dialogs or prompts before deleting files to avoid accidental deletions.

Style Components: Apply CSS or Angular Material styling to enhance the UI of file upload, display, and PDF viewer components.

Add Navigation: Implement navigation between file upload, project view, and PDF display components using Angular Router.

Handle Edge Cases: Consider edge cases like file size limits, file type validation, and handling server errors during file upload and deletion.

Implement Progress Indicators: Show progress bars or loaders during file uploads and other asynchronous operations to provide user feedback.

Optimize Performance: Optimize file upload and download processes, considering large file sizes and potential network issues.

Test File Uploads: Conduct testing to ensure file uploads work seamlessly across different browsers and devices.

Test PDF Viewing: Test PDF viewer component with various PDF files to ensure compatibility and smooth rendering.

Handle Authentication and Authorization: Implement authentication and authorization mechanisms if required to restrict access to file upload and viewing functionalities.

Document Your Code: Document your Angular components, services, and API interactions for future reference and team collaboration.

Implement Error Handling: Develop error handling mechanisms to gracefully manage errors during file uploads, downloads, and other operations.

Deploy Your Angular App: Prepare your Angular application for deployment to a hosting platform or server.

Test in Production-Like Environment: Conduct thorough testing in a production-like environment to ensure everything works as expected.

Monitor Performance: Monitor application performance post-deployment, focusing on file upload/download speeds and overall user experience.

Gather Feedback: Gather user feedback to identify any usability issues or additional features that could enhance the application.

Iterate and Improve: Based on feedback and testing results, iterate on your application to fix bugs and implement improvements.

Backup and Recovery: Implement backup and recovery procedures for uploaded files to prevent data loss.

Document Deployment Process: Document the deployment process for future updates and maintenance.

These steps should guide you through building a robust Angular application for handling file uploads, display, and PDF viewing with integration to your Spring Boot backend.